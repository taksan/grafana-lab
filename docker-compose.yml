services:
  # User Database Service
  user-database:
    build: ./fake-traffic-generator/user-database
    container_name: user-database
    ports:
      - "9500:8500"
    networks:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "container,service"
    labels:
      container: "user-database"
      service: "fake-traffic-generator"
    restart: unless-stopped

  # Server Assignment Service
  server-assignment:
    build: ./fake-traffic-generator/server-assignment
    container_name: server-assignment
    ports:
      - "9600:8600"
    networks:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "container,service"
    labels:
      container: "server-assignment"
      service: "fake-traffic-generator"
    restart: unless-stopped

  # Traffic Generator Application
  traffic-generator:
    build: ./fake-traffic-generator/traffic-generator
    container_name: traffic-generator
    ports:
      - "9001:8000"
    volumes:
      - ./user_flows.yml:/app/user_flows.yml:ro
      - ./geo_servers.geojson:/app/geo_servers.geojson:ro
    networks:
      - monitoring
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
        labels: "container,service"
    labels:
      container: "traffic-generator"
      service: "fake-traffic-generator"
    depends_on:
      - user-database
      - server-assignment
    restart: unless-stopped

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    restart: unless-stopped

  # Loki - Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped

  # Promtail - Log Collector
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    # Removed user directive to work in rootless environments
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      # Support both rootful and rootless Docker socket locations
      - ${DOCKER_SOCK:-/var/run/docker.sock}:/var/run/docker.sock:ro
    command: -config.file=/etc/promtail/config.yml
    ports:
      - "9080:9080"
    networks:
      - monitoring
    depends_on:
      - loki
      - traffic-generator
    restart: unless-stopped

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
    restart: unless-stopped

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data:
  loki-data:
