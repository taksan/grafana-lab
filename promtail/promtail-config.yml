server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  - job_name: containers
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    
    relabel_configs:
      # We only want to scrape containers that have the 'service=traffic-generator' label.
      - source_labels: ['__meta_docker_container_label_service']
        regex: 'traffic-generator'
        action: keep

      # Create a 'container' label from the Docker container name
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'

    pipeline_stages:
      # 1. Unpack the standard Docker JSON log format. This stage replaces
      # the log line with the content of the "log" field and sets the timestamp.
      - docker: {}

      # 2. Parse the application's JSON log line. We extract all the fields
      # we might want to use for labels or structured metadata.
      - json:
          expressions:
            # Simple fields at the root level
            level: level
            client_ip: client_ip
            user_id: user_id
            message: message
            # Nested fields using JMESPath
            method: http.request.method
            status_code: http.response.status_code
            bytes: http.response.bytes
            url: http.url
            user_agent: user_agent.original
            # Geocode fields
            country_name: geocode.country_name
            country_code: geocode.country_iso_code
            city_name: geocode.city_name
            geo_lat: geocode.location.lat
            geo_lon: geocode.location.lon

      # 3. Create Loki labels from some of the extracted fields.
      # Best practice is to use low-cardinality fields for labels.
      - labels:
          level:
          status_code:
          method:
          country_name:
          city_name:
          user_id: