// Grafana Alloy Configuration for Log Collection

// Discover Docker containers via API
discovery.docker "containers" {
  host = "unix:///var/run/docker.sock"
}

// Filter to only log-generator
discovery.relabel "log_generator" {
  targets = discovery.docker.containers.targets
  
  rule {
    source_labels = ["__meta_docker_container_name"]
    regex         = "/log-generator"
    action        = "keep"
  }
}

// Read logs via Docker API (no file access needed!)
loki.source.docker "log_generator" {
  host       = "unix:///var/run/docker.sock"
  targets    = discovery.relabel.log_generator.output
  forward_to = [loki.process.parse_logs.receiver]
}

// Process and parse logs
loki.process "parse_logs" {
  // Parse Docker JSON format
  stage.json {
    expressions = {
      log    = "log",
      stream = "stream",
      time   = "time",
    }
  }
  
  // Extract timestamp
  stage.timestamp {
    source = "time"
    format = "RFC3339Nano"
  }
  
  // Parse the actual log content (JSON logs from our app)
  stage.json {
    source = "log"
    expressions = {
      timestamp   = "timestamp",
      level       = "level",
      client_ip   = "client_ip",
      user_id     = "user_id",
      method      = "http.request.method",
      status_code = "http.response.status_code",
      bytes       = "http.response.bytes",
      url         = "http.url",
      message     = "message",
    }
  }
  
  // Add extracted fields as labels
  stage.labels {
    values = {
      level       = "",
      method      = "",
      status_code = "",
    }
  }
  
  // Output the log
  stage.output {
    source = "log"
  }
  
  forward_to = [loki.write.loki_endpoint.receiver]
}

// Write logs to Loki
loki.write "loki_endpoint" {
  endpoint {
    url = "http://loki:3100/loki/api/v1/push"
  }
}
